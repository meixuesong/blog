<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[雪松]]></title>
  <link href="https://xuesong.tech/atom.xml" rel="self"/>
  <link href="https://xuesong.tech/"/>
  <updated>2023-12-28T10:04:30+08:00</updated>
  <id>https://xuesong.tech/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[关于我]]></title>
    <link href="https://xuesong.tech/guan-yu-wowo-shi-mei-xue-song.html"/>
    <updated>2023-10-23T00:18:20+08:00</updated>
    <id>https://xuesong.tech/guan-yu-wowo-shi-mei-xue-song.html</id>
    <content type="html"><![CDATA[
<p>我是梅雪松，是一名<strong>开发者</strong>，喜欢用代码来改变世界。我也是一名<strong>架构师</strong>，追求简单设计并致力架构的守护和演进，主持过多个大型遗留系统的现代化改造工作。我还是一名<strong>咨询师</strong>，帮助客户打造高绩效团队，提升团队在敏捷技术实践、DevOps等方面的技能，构建持续交付能力，并帮助团队应用领域驱动设计（DDD）、微服务等设计方法，提升软件质量。</p>
<p><img src="media/16979915004701/16979322167911.jpg" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[嵌入式系统的需求管理——如何将交付效率提升一倍？]]></title>
    <link href="https://xuesong.tech/17035756228983.html"/>
    <updated>2023-12-26T15:27:02+08:00</updated>
    <id>https://xuesong.tech/17035756228983.html</id>
    <content type="html"><![CDATA[
<p>在以往，嵌入式系统开发往往是单兵作战，依赖于个体能力，详细的需求文档并不被视为必要条件。然而，随着嵌入式系统的复杂度不断提高，团队协作变得至关重要。这就离不开知识的传递和消费，因此需求管理在嵌入式系统中的重要性日益凸显，它不仅关乎业务实现，更影响到团队的沟通和项目顺利进行。</p>
<p>最近，我们在一项嵌入式项目中探索了不同的需求描述方法，从传统的需求规格说明书到敏捷的用户故事，再到我们最终采用的系统用例。这一方法极大地提升了团队的开发效率，本文将分享我们的经验和思考。</p>
<span id="more"></span><!-- more -->
<h2><a id="%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%9C%80%E6%B1%82%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8F%8F%E8%BF%B0%EF%BC%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>嵌入式系统的需求应该如何描述？</h2>
<p>今年，我们有幸参与了一项极富挑战性的嵌入式项目。我们首先面临的问题是如何将客户的想法转化为可供开发的需求文档。</p>
<p>最初客户采用了传统的需求规格说明书的形式。然而我们很快发现，这种通用的模板并不能很好地满足我们的需求。规格说明书的冗长和细节繁多，既增加了编写的工作量，在该详细说明的地方又没说清楚。</p>
<p>作为敏捷软件开发的实践者，我们迅速转向使用用户故事管理需求，用户故事（User Story）是从用户的角度来描述用户渴望得到的功能。它包括三个要素：角色、活动和商业价值。但遗憾的是，用户故事并不适用于我们的嵌入式场景。</p>
<p>首先嵌入式系统中的角色非常单一，并不存在多个角色。另外，用户故事INVEST原则的“可协商性”和“有价值”在这里并不重要。因为嵌入式产品通常完成确定的功能，其价值也是作为一个整体来体现。在我们这个项目中，它完成的是一些标准协议和明确的交互，不存在可协商性。而价值更侧重于整个系统提供完整业务价值，单个具体功能的价值体现非常有限。最后，用户故事通常不涉及详细的实现步骤，更多是围绕价值和验收条件。但在嵌入式系统中，恰恰相反，验收条件可能很简单，但实现过程却非常复杂。如果需求文档缺少了过程的描述，则起不到需求的作用。</p>
<p>那么嵌入式系统究竟应该怎么描述需求呢？有没有更理想的方法？</p>
<p>这使我想起多年前阅读过的经典著作<a href="https://book.douban.com/subject/1233316/">《编写有效用例》</a>，这是一本与Jez Humble的持续交付一样获得Jolt大奖的经典书籍。</p>
<p>能否将用例​用于嵌入式系统的需求管理呢？​</p>
<h2><a id="%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BE%8B%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A2%86%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>系统用例在嵌入式领域中的应用</h2>
<blockquote>
<p>用例是系统中各个干系人（stakeholder）就系统行为所达成的契约。用例描述了在不同条件下，系统对某一干系人的请求做出响应时发生的系统行为。</p>
</blockquote>
<p>我们采用了一个简化的系统用例模板来描述需求，一个用例只需要包括三部分：概述、基本路径和扩展路径。我们来看一个示例：</p>
<pre><code class="language-plain_text">一、概述

XX方案一般由主站发送报文，由TM将报文下发，并将设备返回的报文保存到A中心。......

二、基本路径

1 TM根据任务设置，周期性执行XX方案
2 TM根据任务的方案ID，从A中心查询方案
3 A中心返回方案，方案中有“内容集”，结构见附录。
4 TM对“内容集”的“内容”进行循环，执行后续步骤。
5 TM根据通信地址，找到设备档案。
6 TM根据设备档案，确定是通过串口还是载波下发报文。
7 TM通过串口/载波发送方案报文集的一条报文。
8 串口/载波App返回ACK成功。
9 串口/载波App返回设备的报文。
10 TM将设备的原始报文保存到A中心，以记录型数据保存。
...

三、扩展路径

5a TM根据通信地址，未找到设备档案。
5a1 TM结束当前业务处理。

8a 串口/载波App返回ACK超时
8a1 TM重试一次，如果仍然超时则结束业务处理

8b 串口/载波App返回ACK否认
8b1 TM结束当前业务处理。
</code></pre>
<p>基本路径是主成功场景，通常是一切顺利的情况下，系统的处理步骤。扩展路径表示备选流，描述了各种分支和异常场景的处理。例如8a就是第8步的一个分支，8a1 表示这个分支的第1步。8b表示第8步的另一个分支，以此类推。</p>
<p>在嵌入式系统中，一个功能通常由若干系统组件共同完成。它可能是由人工触发或者物联设备、系统内置模块等触发，然后系统的不同组件互相协同，通过接口进行交互，完成特定功能。</p>
<p>通过系统用例，我们用不到20行文字就把这个需求描述清楚了。这样的文档具有开发和测试人员所需要的详细信息，同时编写起来也比较简单，不用花很多时间。</p>
<h2><a id="%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A2%86%E5%9F%9F%E9%87%87%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BE%8B%E7%9A%84%E4%BC%98%E5%8A%BF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>嵌入式领域采用系统用例的优势</h2>
<p>我们在实践中发现，系统用例特别适合于嵌入式系统。</p>
<p><strong>需求非常清晰</strong></p>
<p>嵌入式系统通常只有很少的UI交互，有些甚至完全没有UI交互。如何描述清楚需求，是一个很大的挑战。</p>
<p>与传统需求规格说明书中的大段落，没有章法的描述相比，系统用例可以清晰地描述每一个步骤的系统行为。每一步都使用简单的语法，而且都很明确，谁做什么事情，或者谁做出什么响应。主语、谓语动词、直接宾语等，这些构成了一个非常简洁、清晰的需求。</p>
<p><strong>提升开发效率</strong></p>
<p>开发人员的时间通常花在想清楚这个需求怎么做、动手开发、调试和测试，以及返工上。而测试人员的时间通常花在理解这是个啥需求，我要怎么测上。在这些方面系统用例都能够大幅提升效率。</p>
<p>系统用例能够提供详细、准确和简洁的需求，为团队提供了明确的方向，避免因为误解或遗漏需求而导致的设计和代码修改。这不仅可以节省开发时间，更重要的是减少了返工的时间。毕竟返工是最大的浪费。</p>
<p>系统用例降低了沟通成本，使团队成员能够快速理解需求并高效地分工合作。BA、Dev和QA可以基于同一份文档高效合作。</p>
<p>对于使用TDD开发的Dev来说还有一个额外的帮助，任务分解（Tasking）变得更加简单了。因为系统用例的每一步都是一个Task。</p>
<p><strong>交付高质量产品</strong></p>
<p>嵌入式系统对于质量有着更高的诉求，有些甚至是工业级产品要求。做一个能工作的产品很容易，但要做一个工业级的产品，要付出十倍、百倍的工作量。如何提升产品的质量？以往的经验告诉我们，产品质量取决于对异常情况的处理。</p>
<p>系统用例通过扩展路径来描述各种备选流和异常分支。在分析需求的过程中，需求分析师通过自问“这一步还会出现别的情况吗？”，可以发现很多程序需要应对的场景。例如，对方超时未响应，对方返回错帧等等。</p>
<p>开发人员可以跟随系统用例的每一步，采用TDD，开发出高质量的代码和安全防护网。</p>
<p>测试人员也非常容易根据系统用例来设计针对边界值、特殊场景的测试用例。甚至提前发现需求遗漏的场景，这也是测试左移的价值。</p>
<p>所以这些都能够帮助团队将质量内建在每个交付过程中。</p>
<h2><a id="%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BE%8B%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E6%8F%90%E5%8D%87%E4%B8%80%E5%80%8D%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>案例：系统用例帮助我们提升一倍开发效率</h2>
<p>我们团队最近交付了一个嵌入式系统软件，这个软件运行于一个终端产品中，完成边缘计算任务。产品具有非常高的稳定性要求，需要在各种恶劣环境下，7*24小时长年持续稳定运行。</p>
<p><img src="media/17035756228983/%E7%BB%88%E7%AB%AF%E7%94%B5%E8%A1%A8.jpg" alt="" /></p>
<p>在项目早期没有系统用例的时候，因为团队不熟悉业务，对粗粒度的需求文档理解起来非常困难，即使经过多轮沟通，也仍然会有误解或遗漏。大家花费了大量时间去理解业务，代码也经常出现返工。交付效率一直提不上去，质量也不高。</p>
<p>在采用系统用例描述需求后，这种局面得到了彻底改善。即使团队不熟悉业务，也能够按照需求文档的描述完成功能开发。开发效率大幅提升，同样规模的功能，现在只需要一半的时间。其中最明显的区别在于开发人员在理解我要干什么这件事情的认知负担明显降低了，返工明显减少了，而且质量还提高了。</p>
<p>系统用例作为一种描述需求的方法，其简洁、准确的特点有助于形成高质量的需求文档。这些文档为开发过程提供明确的指导，而且会积累成为知识库。这个知识库不仅是组织的核心资产，还能助力新人快速融入项目，提升团队整体能力。</p>
<h2><a id="%E6%80%BB%E7%BB%93%E4%B8%8E%E5%B1%95%E6%9C%9B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>总结与展望</h2>
<p>本文探讨了嵌入式系统的需求管理，并分享了在一个具有挑战性的嵌入式项目中所取得的经验。通过对需求描述方式的多次尝试，最终确定了在嵌入式场景下更为适用的需求管理方法——系统用例。通过系统用例，团队成功地提高了开发效率，使得交付过程更为流畅。</p>
<p>展望未来，我们期待继续在嵌入式系统的开发中探索更加精细、高效的需求管理方法。通过不断总结经验，优化流程，我们期待在需求管理领域寻找更多创新的方法，以适应未来嵌入式系统的复杂性挑战。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么又建了个博客？]]></title>
    <link href="https://xuesong.tech/wei-shen-me-you-jian-le-ge-bo.html"/>
    <updated>2023-10-23T00:18:20+08:00</updated>
    <id>https://xuesong.tech/wei-shen-me-you-jian-le-ge-bo.html</id>
    <content type="html"><![CDATA[
<p>我曾经建过多个博客，有的坚持时间长一些，有的则是享受建工具的过程，却没有写博客。这次又建了个博客，原因是最近有了一些想法。</p>
<p>首先是复利的思想。虽然早就知道复利，但最近在一本书中读到这样一句话：</p>
<blockquote>
<p>生活中所有的回报，无论是财富、人际关系，还是知识，都来自复利。</p>
</blockquote>
<p>这个“<strong>所有的回报</strong>”，还是让我很有感触。细想确实如此，知识、声誉都存在复利效应。博客写在那里，就是知识的积累，不仅对自己有帮助，也能分享给需要的人。通过写作也能不断积累自己的声誉，逐渐产生杠杆作用。</p>
<p>其次是按照费曼学习法，将自己所学输出成文字，加深对知识的理解，将知识内化到自己的思想中。</p>
<p>最后是自省。如果博客写的少，没内容可写，某种程度上说明自己没有进步、没有积累、没有沉淀。这时候需要自省一下，我想要什么？我要到哪里去？</p>
<p>因此，基于这三个原因，我又建了个博客。但这里并不想立什么Flag，以往的经验告诉我，立Flag必败。孔子说“朝闻道，夕死可矣”，我想写一篇就收获一篇，不问结果，只管耕耘。</p>

]]></content>
  </entry>
  
</feed>
