<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[雪松]]></title>
  <link href="https://xuesong.tech/atom.xml" rel="self"/>
  <link href="https://xuesong.tech/"/>
  <updated>2024-01-10T11:10:20+08:00</updated>
  <id>https://xuesong.tech/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[关于我]]></title>
    <link href="https://xuesong.tech/guan-yu-wowo-shi-mei-xue-song.html"/>
    <updated>2023-10-23T00:18:20+08:00</updated>
    <id>https://xuesong.tech/guan-yu-wowo-shi-mei-xue-song.html</id>
    <content type="html"><![CDATA[
<p>我是梅雪松，是一名<strong>开发者</strong>，喜欢用代码来改变世界。我也是一名<strong>架构师</strong>，追求简单设计并致力架构的守护和演进，主持过多个大型遗留系统的现代化改造工作。我还是一名<strong>咨询师</strong>，帮助客户打造高绩效团队，提升团队在敏捷技术实践、DevOps等方面的技能，构建持续交付能力，并帮助团队应用领域驱动设计（DDD）、微服务等设计方法，提升软件质量。</p>
<p><img src="media/16979915004701/16979322167911.jpg" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么？带团队你还不知道怎么排兵布阵？]]></title>
    <link href="https://xuesong.tech/17042360951377.html"/>
    <updated>2024-01-03T06:54:55+08:00</updated>
    <id>https://xuesong.tech/17042360951377.html</id>
    <content type="html"><![CDATA[
<p>小时候看古代小说，总觉得他们打仗用的阵法特别炫酷，比如一字长蛇阵，攻击到蛇头、蛇身或蛇尾时，瞬间就能卷、绞、咬。这些情节总是让我觉得又威风又神秘，兴奋不已。长大后明白了作为个体的士兵在组成部队后，通过阵法的运用，能产生出远超个体之和的力量。</p>
<p>在现代商业社会，面对激烈的商业竞争，你的团队如何排兵布阵呢？本文尝试探讨一下团队拓扑在嵌入式领域的应用。</p>
<span id="more"></span><!-- more -->
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%A2%E9%98%9F%E6%8B%93%E6%89%91" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是团队拓扑</h2>
<p>河南省新密市出土了一套4500年前我国最早的《<a href="https://baike.baidu.com/item/%25E9%25A3%258E%25E5%2590%258E%25E5%2585%25AB%25E9%2598%25B5%25E5%2585%25B5%25E6%25B3%2595%25E5%259B%25BE/8798422">风后八阵兵法图</a>》，传说由黄帝与其大将风后研创。该图共九幅，一幅为八阵正图，其余八幅为阵势图，每幅图旁均有文字说明，介绍攻防要诀。黄帝靠着这个兵法图，“用经略，北清涿鹿，南平蚩尤，底定万国”，一统中原。</p>
<p><img src="media/17042360951377/17044191512320.jpg" alt="" /></p>
<p>你看，4500年前古人就开始用阵法来打仗。他们是非常讲究布阵的。布阵得法就能充分发挥军队的战斗力，克敌制胜。</p>
<p>现代商业组织如何布阵呢？我们知道有金字塔型和扁平型的组织结构。这些都属于静态的结构。但在今天这样一个快速变化的商业环境中，我们需要更加强调动态变化。</p>
<p>《高效能团队模式》介绍了团队拓扑(Team Topologies)，它是一种全新的架构，一种动态的过程。书中提出了一种将团队结构和组织设计与软件系统的架构相结合的方法。它强调了在不同组织层次上创建适应性强、高效协作的团队结构的重要性。</p>
<p>团队拓扑定义了四种类型的团队，以及它们之间的三种交互模式。</p>
<p><img src="media/17037302112727/17037303604321.jpg" alt="" /></p>
<p>这四种类型和三种模式表示什么意思呢？</p>
<p>我们以某个嵌入式领域的组织为例。它有多个产品中心，每个产品中心就是一个<strong>业务流团队</strong>，它最接近用户，负责一个产品、一项服务或者一组功能，能够独立交付用户价值。</p>
<p>作为业务流团队，产品中心持续面临交付压力。他们可能没有时间去研究和学习新技能，所以需要赋能团队的帮助。<strong>赋能团队</strong>由特定技术领域或产品领域的专家组成，他们在工具、实践、框架、技术栈等方面给出高质量的建议。这使得业务流团队不必付出太多努力就能获得能力提升。</p>
<p>这个产品中心的产品还涉及到一些复杂的预测算法，由一个专家小组负责，这个小组就是复杂子系统团队。<strong>复杂子系统团队</strong>负责构建和维护系统中严重依赖专业领域知识的子系统。这类业务非常复杂，需要具备特定能力的专家。</p>
<p>产品中心基于公司的产品平台，根据特定行业的客户需求做二次开发。这套产品平台由一个平台团队负责。<strong>平台团队</strong>的目标是使业务流团队能够以高度自治的方式交付工作。平台团队提供的内部服务使得业务流团队无须开发底层服务，降低了认知负荷。</p>
<p>熟悉完这四类团队，我们再看看三种交互方式。</p>
<p>产品中心刚成立时，对产品平台不熟悉，需要平台小组手把手教，一起工作。这时候他们的交互方式是<strong>协作</strong>（一起紧密地工作）。</p>
<p>产品中心将以敏捷的方式交付产品，因此聘请了外部顾问团队做敏捷赋能工作，以优化研发管理并提升技术实践能力。顾问团队提供的是指导和赋能，而不是直接参与具体交付工作，因此他们之间的交互方式就是<strong>促进</strong>。</p>
<p>产品中心还需要其它部门的协助，例如需要物资部提供元器件的采购服务。这时候物资部以<strong>服务</strong>的方式提供能力给产品中心。服务有清晰的边界，不需要了解太多上下文，可以尽量减少协作。</p>
<h2><a id="%E5%9B%A2%E9%98%9F%E6%8B%93%E6%89%91%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BA%94%E7%94%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>团队拓扑在嵌入式领域的应用</h2>
<p>团队拓扑的价值在于，它能帮助我们以动态的视角来排兵布阵。我们在<a href="https://xuesong.tech/17037655703316.html">嵌入式系统的团队设计——团队优先</a> 中提到，要采用“团队优先”的原则，降低团队认知负荷。我们来看看如何利用团队拓扑进行排兵布阵。</p>
<h3><a id="%E4%BB%8E%E4%BB%B7%E5%80%BC%E6%B5%81%E5%8F%91%E6%8E%98%E4%B8%9A%E5%8A%A1%E8%83%BD%E5%8A%9B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>从价值流发掘业务能力</h3>
<p>价值流是指在整个产品开发过程中，从需求到最终用户获得价值的全部过程。通过价值流分析，可以深入了解整个业务流程，识别潜在的业务能力需求。</p>
<p>可以通过生产路径图（Path to Product）可视化从需求到最终交付的整个价值流。在生产路径图中，每个阶段都有其特定的目标、活动以及所需的业务能力。业务能力是组织实现其目标所需的技术和业务的组合，不同的业务能力在不同的阶段发挥着关键作用。例如，需求分析阶段需要强大的业务分析和知识转化能力。在设计阶段，需要在硬件、电气、结构和软件等领域的专业能力。</p>
<h3><a id="%E4%BB%8E%E4%B8%9A%E5%8A%A1%E8%83%BD%E5%8A%9B%E8%AF%86%E5%88%AB%E4%B8%9A%E5%8A%A1%E6%B5%81%E5%9B%A2%E9%98%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>从业务能力识别业务流团队</h3>
<p>从业务能力中找到核心能力，核心能力离客户最近，要能够独立贡献客户价值。这些是业务流团队需要具备的能力，通过核心能力识别找到业务流团队。</p>
<p>以一家嵌入式领域的公司业务举例来说，其价值流是以行业标准为基础，满足各地区的差异化需求，完成产品供货是其价值流。其中产品的设计、软件研发是其核心能力。而标准制定、批量生产不是其核心能力。这家公司将产品中心作为业务流团队，产品中心需要拥有这些核心能力。</p>
<h3><a id="%E9%80%86%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B%E8%AE%BE%E8%AE%A1%E4%B8%9A%E5%8A%A1%E6%B5%81%E5%9B%A2%E9%98%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>逆康威定律设计业务流团队</h3>
<p>产品中心作为业务流团队，可能仍然规模太大，需要进行拆分。康威定律揭示了组织结构对产品结构的深远影响，拆分团队需要考虑康威定律。</p>
<p>康威定律（Conway's Law）是由计算机科学家梅尔·康威（Melvin Conway）提出的原则，它表明组织结构的设计会影响到所生产的系统的设计：</p>
<blockquote>
<p>设计系统的组织由于受到约束，这些设计往往是组织内部沟通结构的副本。</p>
</blockquote>
<p>也就是说，如果组织结构与系统架构不一致，最终组织结构会胜出，系统架构将会与组织结构匹配。例如有四个小组合作开发一个编译器，那么你将得到一款具有四个步骤的编译器。</p>
<p>逆康威定律是对康威定律的一种反思，由Thoughtworks的技术总监James Lewis提出：团队结构必须与所需的软件架构或者产生非预期设计的风险相匹配。</p>
<p>逆康威定律的目标是使组织更适应系统的需求。例如编译器架构设计了4个模块，我们可以考虑由4个团队开发这个编译器。这有助于促进系统的灵活性和创新，以适应不断变化的业务和技术环境。</p>
<p>设计业务流团队时，除了逆康威定律的指导，还要考虑团队规模。参考<a href="https://xuesong.tech/17037655703316.html">嵌入式系统的团队设计——团队优先</a> 中提到的5-9人团队规模，以及设计系统边界，以降低团队认知负荷。</p>
<h3><a id="%E5%A2%9E%E5%BC%BA%E4%B8%9A%E5%8A%A1%E6%B5%81%E5%9B%A2%E9%98%9F%E7%9A%84%E8%83%BD%E5%8A%9B%EF%BC%8C%E6%B6%88%E9%99%A4%E7%9F%AD%E6%9D%BF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>增强业务流团队的能力，消除短板</h3>
<p>根据价值流各阶段的目标和能力要求，识别出业务流团队的能力短板和瓶颈，通过各种手段为业务流团队高效、高质量地交付产品提供系统性支撑。</p>
<p>如果是技术过于复杂，可以建立复杂子系统团队，封装技术复杂性。例如某个预测算法，可以由内部资深专家，或者与大学等研究机构合作，形成专家团队。</p>
<p>如果是某些能力不足，可以在公司内部或者寻找外部资源，组成赋能团队，引入新的方法、实践和工具，提升团队的认知能力和工具升级。例如在质量内建、持续交付、项目管理等方面引入外部顾问团队。</p>
<p>如果发现产品已经逐渐成熟，可以平台化，可以建立平台团队，打造产品平台，以提升团队的响应力。这一点很多企业都在做，需要注意的是，平台应该与产品紧密结合。例如平台来源于产品，并反过来成就产品。</p>
<h3><a id="%E6%8C%81%E7%BB%AD%E8%BF%9B%E5%8C%96%E5%9B%A2%E9%98%9F%E6%8B%93%E6%89%91" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>持续进化团队拓扑</h3>
<p>团队拓扑需要与时俱进，这不仅体现在结构上，也体现在交互方式上。</p>
<p>例如在产品探索阶段，业务专家、硬件、软件和结构团队需要高度协作，它们的边界是重叠的，甚至可能成立多功能团队，由不同角色人员组成一个创新小团队。这时候团队间的交互模式是协作。当产品成型后，团队间交互可能由协作变为服务。例如结构团队只根据产品中心的需求做结构修改服务。</p>
<p><img src="media/17042360951377/17048549018031.jpg" alt="" /></p>
<p>产品平台也存在类似的情况。当一个业务流团队想基于产品平台快速定制出一个新产品时，由于这个业务流团队是第一次使用产品平台，需要手把手教。这时候可以采用<strong>协作</strong>方式，由产品平台团队派人与业务流团队一起密切工作。当业务流团队基本熟悉了产品平台后，可以采用<strong>赋能</strong>的方式，按需指导，但不参与业务开发。当业务流团队足够成熟后，可以采用<strong>服务</strong>方式，通过团队API提供支持，例如完整的官方平台文档。</p>
<h2><a id="%E6%80%BB%E7%BB%93" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>总结</h2>
<p>团队拓扑不仅是一种组织设计方法，更是一种思考动态变化的商业环境下如何最优化团队结构的理念。以业务流团队为中心，以团队优先为原则，通过赋能团队、复杂子系统团队和平台团队，降低团队认知负荷，并灵活运用三种交互模式，组织能够更好地应对未知挑战，提高整体效能。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[嵌入式系统的团队设计——团队优先]]></title>
    <link href="https://xuesong.tech/17037655703316.html"/>
    <updated>2023-12-28T20:12:50+08:00</updated>
    <id>https://xuesong.tech/17037655703316.html</id>
    <content type="html"><![CDATA[
<p>组织中所有的问题都可以最后归结为人的问题。很多时候我们期望流程和工具能够解决这些问题，然而如果忽视了团队中个体的需求、动机和互动方式，那么再正确的流程和再好的工具也无济于事。因为流程和工具无法发现人、培养人、激发人。</p>
<p>真正的团队效能来源于团队之间以及成员之间的协同合作、有效沟通和共同目标。因此，在构建和优化团队时，我们需要将关注点放在团队本身，坚持“团队优先”的原则。</p>
<span id="more"></span><!-- more -->
<h2><a id="%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%81%9A%E9%9B%86%E4%BA%8E%E5%9B%A2%E9%98%9F%EF%BC%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>为什么要聚集于团队？</h2>
<p>嵌入式系统涉及的技术领域广泛且复杂，包括硬件、固件、驱动、软件等。一个团队中的成员可能各自专长于某一技术方向，但一个有凝聚力的团队能够充分利用每个成员的专长，同时弥补彼此的短板，从而在整体上具备更全面的技术能力。因此，一个有凝聚力的团队的表现要远远超出个人的集合。</p>
<p>有些嵌入式团队依赖于某几个技术骨干，他们能力很强、效率很高。但缺乏人才梯队的团队并不是一个健康的状态。几年前，一则关于10倍工程师能力的推文在社交媒体上引发了广泛的讨论。投资人Shekhar Kirani在Twitter上提出了这一观点：“有些工程师能以一当十，创业者如果有幸有这些人加盟，那么成功率就能够大幅提升。”虽然有些人赞同这一观点，但更多的人则是以讽刺的方式表达了不同的看法。</p>
<p>Thoughtworks技术雷达认为与10倍工程师相比，更应该关注10倍团队：</p>
<blockquote>
<p>在过去的几个月中，10倍工程师一词受到了密切的关注。一个广泛传播的推文讨论在实质上建议公司应原谅反社会和破坏性的行为，以留住被认为个人产出巨大的工程师。幸运的是，许多人在社交媒体上都嘲笑了这个概念，但是“明星开发者”的刻板印象仍然普遍存在。根据我们的经验，伟大的工程师不是因为个人产出而是因为能在优秀的团队中合作而诞生。打造一支混合不同经验和背景，但成员才华横溢的团队，并为团队合作、学习和持续改进提供良好的助力，这会是更行之有效的方式。这些10倍团队行动起来更快，弹性也更强——而无需屈从错误的行为。</p>
</blockquote>
<p>《敏捷革命》中也提到同样的观点。耶鲁大学的乔尔·斯波尔斯基（Joel Spolsky）教授把学生的成绩和花费的时间做了对比。发现最快的学生和其他同学的速度相比是10:1。最快的学生是其他同学的10倍。然而，一项涉及3800个项目的研究发现，团队之间的差别比个人之间的差别大得多。最好的团队可以在1周内完成任务，但最慢的团队不是花费10周，而是花了2000周。这就是最差团队和最好团队的差别。所以如果你聚集于团队能力，就算是让最差的团队达到中等水平，效率也会有惊人的提升。</p>
<h2><a id="%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%A2%E9%98%9F%E4%BC%98%E5%85%88%EF%BC%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>什么是团队优先？</h2>
<p>团队优先意味着组织不仅鼓励团队追求远大的目标，还给予其充分的自主性。这样的团队能够自我组织、自我管理，他们有能力决定如何工作并获得所需的授权。</p>
<p>团队优先还意味着要充分考虑团队的认知负载、协作方式、沟通成本和人员能力等。只有把每个人看作生态中的一份子，产生内驱力，提供机会，提升能力，才能真正激发团队的潜力，推动团队走向卓越。</p>
<p>在团队内部，团队成员也要有团队优先的意识，意味着团队成员将团队需求置于个人需求之上，能够：</p>
<ul>
<li>聚焦于团队目标。</li>
<li>保证讨论和调研事项走上正轨。</li>
<li>在开始新工作之前帮助其他成员解决阻塞事项。</li>
<li>辅导新团队成员和缺乏经验的成员。</li>
<li>高效参加团队活动（周会、站会等）。</li>
<li>避免陷入“谁赢谁输”的争论，与此相反，乐于探索新的选项。</li>
</ul>
<p>要做到团队优先，可以从团队规模、团队生命周期、责任心、限定边界、降低认知负载和共享知识入手。</p>
<h2><a id="%E5%B0%8F%E5%9B%A2%E9%98%9F%E6%9B%B4%E5%AE%B9%E6%98%93%E5%BB%BA%E7%AB%8B%E4%BF%A1%E4%BB%BB%E5%92%8C%E7%B4%A7%E5%AF%86%E7%9A%84%E5%90%88%E4%BD%9C%E5%85%B3%E7%B3%BB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>小团队更容易建立信任和紧密的合作关系</h2>
<p>有研究发现，高度信任的团队是驱动创新和实验的源泉。如果信任缺失，或者由于组织变大而不断降低，交付的速度和安全将受到影响。</p>
<p>团队规模对信任度有直接影响。亚马逊著名的“两张比萨”团队理念强调了小团队的效率与协作优势，而Scrum框架所推荐的团队人数也倾向于5-9人。这些数字背后的原理都可以用邓巴数字来描述。邓巴发现15是一个人可以信任人数的极限，而其中只有5个人能获得深入了解和信任。一旦人数超过9人，信任就会开始崩塌。</p>
<p>团队人数的增加，也会增加沟通成本。你可以简单测算一下人数与沟通渠道的关系。只要把团队人数乘以“团队人数减1”，然后再除以2就行了。对人数为n的团队，它的沟通渠道数量=n(n-1)/2。比如，如果团队有5个人，那么团队的沟通渠道是10条；如果有9个人，沟通渠道是36条；而10个人的沟通渠道会有45条。过多的沟通渠道将超过了人脑的承受能力，我们根本不知道别人正在做什么。沟通成本也急剧增加，例如简单的会议可能从几分钟增加到数小时。</p>
<h2><a id="%E5%BB%BA%E7%AB%8B%E9%95%BF%E6%9C%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E5%9B%A2%E9%98%9F%E4%BB%A5%E8%BE%BE%E5%88%B0%E9%AB%98%E6%95%88%E8%83%BD%E7%8A%B6%E6%80%81" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>建立长期稳定的团队以达到高效能状态</h2>
<p>除了团队规模，高信任度的团队还取决于团队的生命周期。</p>
<p>团队需要花时间磨合以形成生产力。Tuckman模型描述了团队在四个阶段上的表现：</p>
<ol>
<li>组建期：团队刚刚建立。</li>
<li>激荡期：解决最初的个性和工作方式上的差异。</li>
<li>规范期：共同演进标准工作方式。</li>
<li>执行期：达到高效能状态。</li>
</ol>
<p>在高度信任的组织中，几个月换一个团队可能不是大问题。例如在Thoughtworks，团队通常按项目临时组建。由于大家具有相同的价值观和做事方法，所以能够很快形成生产力。但在大多数传统组织，人们需要3个月，甚至更长时间的磨合来形成生产力。</p>
<p>因此，组建长期的产品团队始终优于短期的项目团队。项目是临时的，具有明确开始时间和结束时间，生命周期通常比较短。而产品是长期存在的。如果6个月的项目结束就调换团队，并不是一个好选择。反而保持稳定的产品团队能够维持团队的凝聚力和生产力。</p>
<p>另一种方法是Allan Kelly在他的《Project Myopia》中提到的，让“工作流向团队”。团队应该保持稳定，而非一成不变，仅在必要的时候进行偶尔的调整。</p>
<h2><a id="%E5%9B%A2%E9%98%9F%E4%B8%BA%E4%BA%A7%E5%93%81%E8%B4%9F%E8%B4%A3" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>团队为产品负责</h2>
<p>一个为产品负责的团队，其核心优势在于集体的力量和协作的精神，而不是依赖于单一的个体。这样的团队通过共同的目标和责任，将个体的能力凝聚成强大的整体，从而能够更好地应对挑战和实现卓越的成果。团队成员彼此信任、互相支持，在共同成长中不断提升团队的战斗力。这种团队文化不仅有助于产品的成功，还能为企业和组织创造持久的价值。</p>
<p>每个产品都应该拥有一个唯一的负责团队，做到责任明确、不分散。这种安排避免了多个团队之间可能出现的责任推诿或工作重叠，从而提高了工作效率和产品质量。当问题出现时，该团队能迅速做出反应并找到解决方案，因为他们对自己的产品了如指掌，也对其成功负有全部责任。这种责任制促使团队成员更加专注、投入，以确保产品的成功和满足市场需求。通过明确的责任划分，企业能够更有效地管理资源，推动产品不断创新和进步。</p>
<p>团队应该拥有自主性。这意味着在既定的边界内，团队能够自主决策、自我组织，从而灵活应对各种挑战，高效推动任务的完成。这种自主性不仅提升了团队的责任感和积极性，也促进了成员之间的协作与创新。</p>
<h2><a id="%E8%AE%BE%E8%AE%A1%E7%B3%BB%E7%BB%9F%E8%BE%B9%E7%95%8C%EF%BC%8C%E9%99%8D%E4%BD%8E%E5%9B%A2%E9%98%9F%E8%AE%A4%E7%9F%A5%E8%B4%9F%E8%8D%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>设计系统边界，降低团队认知负荷</h2>
<p>如果一个团队的认知负荷过高，例如任务过多、负责的系统复杂度过高，团队成员可能会面临过大的信息处理和决策压力，降低了自主性。这会导致团队工作效率下降，成员难以集中精力完成任务，甚至可能引发工作质量下降和错误率增加。这种连锁反应可能会导致团队效能走入恶性循环。因此，合理管理团队的认知负荷对于提高团队效率和确保工作质量至关重要。</p>
<p>采用团队优先原则时，团队的职责应该与团队的认知负荷相匹配。这意味着要限制团队负责系统的大小和复杂度。</p>
<p>可以将系统按领域划分，每个领域再划分为简单、复杂、非常复杂等级别。一个团队可以负责一个复杂领域或者多个简单的领域。对于非常复杂的领域应该由专门的专家团队负责或者进一步拆分成多个领域。</p>
<h2><a id="%E9%9A%90%E6%80%A7%E7%9F%A5%E8%AF%86%E6%98%BE%E5%BC%8F%E5%8C%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>隐性知识显式化</h2>
<p>在团队中，隐性知识的显式化对于促进团队能力成长至关重要。隐性知识是指难以用言语表达的技能、经验，这种知识难以传承和分享，限制了团队能力的提升。</p>
<p>我们在一些嵌入式团队发现，产品的需求非常复杂，但由于历史原因，没有完整的文档，只有个别骨干掌握了较完整的信息。这些存在于骨干大脑中的隐性知识如果不显式化出来，就不利于团队的能力成长。</p>
<p>通过将隐性知识显式化，即将其转化为明确、可传播的知识，例如分享经验、将其文档化，建立知识库，团队成员可以更好地理解和掌握这些知识，从而更好地积累和利用经验，提高工作效率和质量。同时，显式化也有助于增强团队的协同效应，促进成员之间的相互学习和共同成长。</p>
<h2><a id="%E6%80%BB%E7%BB%93" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>总结</h2>
<p>在嵌入式系统领域，由于涉及的技术领域更加广泛且复杂，包括硬件、固件、驱动、软件等，如何打造高效能团队，团队设计至关重要。本文强调了采用“团队优先”的原则，提升10倍个人能力很难，但提升10倍团队能力是完全可能的。通过关注团队规模、建立长期稳定团队、限制团队的系统边界、降低团队认知负荷，以及将隐性知识显式化逐步，团队可以更好地应对技术挑战，提高工作效率，最终推动整个团队走向卓越。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[嵌入式系统的需求管理——如何将交付效率提升一倍？]]></title>
    <link href="https://xuesong.tech/17035756228983.html"/>
    <updated>2023-12-26T15:27:02+08:00</updated>
    <id>https://xuesong.tech/17035756228983.html</id>
    <content type="html"><![CDATA[
<p>在以往，嵌入式系统开发往往是单兵作战，依赖于个体能力，详细的需求文档并不被视为必要条件。然而，随着嵌入式系统的复杂度不断提高，团队协作变得至关重要。这就离不开知识的传递和消费，因此需求管理在嵌入式系统中的重要性日益凸显，它不仅关乎业务实现，更影响到团队的沟通和项目顺利进行。</p>
<p>最近，我们在一项嵌入式项目中探索了不同的需求描述方法，从传统的需求规格说明书到敏捷的用户故事，再到我们最终采用的系统用例。这一方法极大地提升了团队的开发效率，本文将分享我们的经验和思考。</p>
<span id="more"></span><!-- more -->
<h2><a id="%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%9C%80%E6%B1%82%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8F%8F%E8%BF%B0%EF%BC%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>嵌入式系统的需求应该如何描述？</h2>
<p>今年，我们有幸参与了一项极富挑战性的嵌入式项目。我们首先面临的问题是如何将客户的想法转化为可供开发的需求文档。</p>
<p>最初客户采用了传统的需求规格说明书的形式。然而我们很快发现，这种通用的模板并不能很好地满足我们的需求。规格说明书的冗长和细节繁多，既增加了编写的工作量，在该详细说明的地方又没说清楚。</p>
<p>作为敏捷软件开发的实践者，我们迅速转向使用用户故事管理需求，用户故事（User Story）是从用户的角度来描述用户渴望得到的功能。它包括三个要素：角色、活动和商业价值。但遗憾的是，用户故事并不适用于我们的嵌入式场景。</p>
<p>首先嵌入式系统中的角色非常单一，并不存在多个角色。另外，用户故事INVEST原则的“可协商性”和“有价值”在这里并不重要。因为嵌入式产品通常完成确定的功能，其价值也是作为一个整体来体现。在我们这个项目中，它完成的是一些标准协议和明确的交互，不存在可协商性。而价值更侧重于整个系统提供完整业务价值，单个具体功能的价值体现非常有限。最后，用户故事通常不涉及详细的实现步骤，更多是围绕价值和验收条件。但在嵌入式系统中，恰恰相反，验收条件可能很简单，但实现过程却非常复杂。如果需求文档缺少了过程的描述，则起不到需求的作用。</p>
<p>那么嵌入式系统究竟应该怎么描述需求呢？有没有更理想的方法？</p>
<p>这使我想起多年前阅读过的经典著作<a href="https://book.douban.com/subject/1233316/">《编写有效用例》</a>，这是一本与Jez Humble的持续交付一样获得Jolt大奖的经典书籍。</p>
<p>能否将用例​用于嵌入式系统的需求管理呢？​</p>
<h2><a id="%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BE%8B%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A2%86%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>系统用例在嵌入式领域中的应用</h2>
<blockquote>
<p>用例是系统中各个干系人（stakeholder）就系统行为所达成的契约。用例描述了在不同条件下，系统对某一干系人的请求做出响应时发生的系统行为。</p>
</blockquote>
<p>我们采用了一个简化的系统用例模板来描述需求，一个用例只需要包括三部分：概述、基本路径和扩展路径。我们来看一个示例：</p>
<pre><code class="language-plain_text">一、概述

XX方案一般由主站发送报文，由TM将报文下发，并将设备返回的报文保存到A中心。......

二、基本路径

1 TM根据任务设置，周期性执行XX方案
2 TM根据任务的方案ID，从A中心查询方案
3 A中心返回方案，方案中有“内容集”，结构见附录。
4 TM对“内容集”的“内容”进行循环，执行后续步骤。
5 TM根据通信地址，找到设备档案。
6 TM根据设备档案，确定是通过串口还是载波下发报文。
7 TM通过串口/载波发送方案报文集的一条报文。
8 串口/载波App返回ACK成功。
9 串口/载波App返回设备的报文。
10 TM将设备的原始报文保存到A中心，以记录型数据保存。
...

三、扩展路径

5a TM根据通信地址，未找到设备档案。
5a1 TM结束当前业务处理。

8a 串口/载波App返回ACK超时
8a1 TM重试一次，如果仍然超时则结束业务处理

8b 串口/载波App返回ACK否认
8b1 TM结束当前业务处理。
</code></pre>
<p>基本路径是主成功场景，通常是一切顺利的情况下，系统的处理步骤。扩展路径表示备选流，描述了各种分支和异常场景的处理。例如8a就是第8步的一个分支，8a1 表示这个分支的第1步。8b表示第8步的另一个分支，以此类推。</p>
<p>在嵌入式系统中，一个功能通常由若干系统组件共同完成。它可能是由人工触发或者物联设备、系统内置模块等触发，然后系统的不同组件互相协同，通过接口进行交互，完成特定功能。</p>
<p>通过系统用例，我们用不到20行文字就把这个需求描述清楚了。这样的文档具有开发和测试人员所需要的详细信息，同时编写起来也比较简单，不用花很多时间。</p>
<h2><a id="%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A2%86%E5%9F%9F%E9%87%87%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BE%8B%E7%9A%84%E4%BC%98%E5%8A%BF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>嵌入式领域采用系统用例的优势</h2>
<p>我们在实践中发现，系统用例特别适合于嵌入式系统。</p>
<p><strong>需求非常清晰</strong></p>
<p>嵌入式系统通常只有很少的UI交互，有些甚至完全没有UI交互。如何描述清楚需求，是一个很大的挑战。</p>
<p>与传统需求规格说明书中的大段落，没有章法的描述相比，系统用例可以清晰地描述每一个步骤的系统行为。每一步都使用简单的语法，而且都很明确，谁做什么事情，或者谁做出什么响应。主语、谓语动词、直接宾语等，这些构成了一个非常简洁、清晰的需求。</p>
<p><strong>提升开发效率</strong></p>
<p>开发人员的时间通常花在想清楚这个需求怎么做、动手开发、调试和测试，以及返工上。而测试人员的时间通常花在理解这是个啥需求，我要怎么测上。在这些方面系统用例都能够大幅提升效率。</p>
<p>系统用例能够提供详细、准确和简洁的需求，为团队提供了明确的方向，避免因为误解或遗漏需求而导致的设计和代码修改。这不仅可以节省开发时间，更重要的是减少了返工的时间。毕竟返工是最大的浪费。</p>
<p>系统用例降低了沟通成本，使团队成员能够快速理解需求并高效地分工合作。BA、Dev和QA可以基于同一份文档高效合作。</p>
<p>对于使用TDD开发的Dev来说还有一个额外的帮助，任务分解（Tasking）变得更加简单了。因为系统用例的每一步都是一个Task。</p>
<p><strong>交付高质量产品</strong></p>
<p>嵌入式系统对于质量有着更高的诉求，有些甚至是工业级产品要求。做一个能工作的产品很容易，但要做一个工业级的产品，要付出十倍、百倍的工作量。如何提升产品的质量？以往的经验告诉我们，产品质量取决于对异常情况的处理。</p>
<p>系统用例通过扩展路径来描述各种备选流和异常分支。在分析需求的过程中，需求分析师通过自问“这一步还会出现别的情况吗？”，可以发现很多程序需要应对的场景。例如，对方超时未响应，对方返回错帧等等。</p>
<p>开发人员可以跟随系统用例的每一步，采用TDD，开发出高质量的代码和安全防护网。</p>
<p>测试人员也非常容易根据系统用例来设计针对边界值、特殊场景的测试用例。甚至提前发现需求遗漏的场景，这也是测试左移的价值。</p>
<p>所以这些都能够帮助团队将质量内建在每个交付过程中。</p>
<h2><a id="%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%B3%BB%E7%BB%9F%E7%94%A8%E4%BE%8B%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E6%8F%90%E5%8D%87%E4%B8%80%E5%80%8D%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>案例：系统用例帮助我们提升一倍开发效率</h2>
<p>我们团队最近交付了一个嵌入式系统软件，这个软件运行于一个终端产品中，完成边缘计算任务。产品具有非常高的稳定性要求，需要在各种恶劣环境下，7*24小时长年持续稳定运行。</p>
<p><img src="media/17035756228983/%E7%BB%88%E7%AB%AF%E7%94%B5%E8%A1%A8.jpg" alt="" /></p>
<p>在项目早期没有系统用例的时候，因为团队不熟悉业务，对粗粒度的需求文档理解起来非常困难，即使经过多轮沟通，也仍然会有误解或遗漏。大家花费了大量时间去理解业务，代码也经常出现返工。交付效率一直提不上去，质量也不高。</p>
<p>在采用系统用例描述需求后，这种局面得到了彻底改善。即使团队不熟悉业务，也能够按照需求文档的描述完成功能开发。开发效率大幅提升，同样规模的功能，现在只需要一半的时间。其中最明显的区别在于开发人员在理解我要干什么这件事情的认知负担明显降低了，返工明显减少了，而且质量还提高了。</p>
<p>系统用例作为一种描述需求的方法，其简洁、准确的特点有助于形成高质量的需求文档。这些文档为开发过程提供明确的指导，而且会积累成为知识库。这个知识库不仅是组织的核心资产，还能助力新人快速融入项目，提升团队整体能力。</p>
<h2><a id="%E6%80%BB%E7%BB%93%E4%B8%8E%E5%B1%95%E6%9C%9B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>总结与展望</h2>
<p>本文探讨了嵌入式系统的需求管理，并分享了在一个具有挑战性的嵌入式项目中所取得的经验。通过对需求描述方式的多次尝试，最终确定了在嵌入式场景下更为适用的需求管理方法——系统用例。通过系统用例，团队成功地提高了开发效率，使得交付过程更为流畅。</p>
<p>展望未来，我们期待继续在嵌入式系统的开发中探索更加精细、高效的需求管理方法。通过不断总结经验，优化流程，我们期待在需求管理领域寻找更多创新的方法，以适应未来嵌入式系统的复杂性挑战。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么又建了个博客？]]></title>
    <link href="https://xuesong.tech/wei-shen-me-you-jian-le-ge-bo.html"/>
    <updated>2023-10-23T00:18:20+08:00</updated>
    <id>https://xuesong.tech/wei-shen-me-you-jian-le-ge-bo.html</id>
    <content type="html"><![CDATA[
<p>我曾经建过多个博客，有的坚持时间长一些，有的则是享受建工具的过程，却没有写博客。这次又建了个博客，原因是最近有了一些想法。</p>
<p>首先是复利的思想。虽然早就知道复利，但最近在一本书中读到这样一句话：</p>
<blockquote>
<p>生活中所有的回报，无论是财富、人际关系，还是知识，都来自复利。</p>
</blockquote>
<p>这个“<strong>所有的回报</strong>”，还是让我很有感触。细想确实如此，知识、声誉都存在复利效应。博客写在那里，就是知识的积累，不仅对自己有帮助，也能分享给需要的人。通过写作也能不断积累自己的声誉，逐渐产生杠杆作用。</p>
<p>其次是按照费曼学习法，将自己所学输出成文字，加深对知识的理解，将知识内化到自己的思想中。</p>
<p>最后是自省。如果博客写的少，没内容可写，某种程度上说明自己没有进步、没有积累、没有沉淀。这时候需要自省一下，我想要什么？我要到哪里去？</p>
<p>因此，基于这三个原因，我又建了个博客。但这里并不想立什么Flag，以往的经验告诉我，立Flag必败。孔子说“朝闻道，夕死可矣”，我想写一篇就收获一篇，不问结果，只管耕耘。</p>

]]></content>
  </entry>
  
</feed>
